<?php

namespace Proxies\__CG__\Ben\MessageBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Message extends \Ben\MessageBundle\Entity\Message implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setThread(\FOS\MessageBundle\Model\ThreadInterface $thread)
    {
        $this->__load();
        return parent::setThread($thread);
    }

    public function setSender(\FOS\MessageBundle\Model\ParticipantInterface $sender)
    {
        $this->__load();
        return parent::setSender($sender);
    }

    public function addMetadata(\FOS\MessageBundle\Model\MessageMetadata $meta)
    {
        $this->__load();
        return parent::addMetadata($meta);
    }

    public function getExcerpt($count = 60, $more = NULL)
    {
        $this->__load();
        return parent::getExcerpt($count, $more);
    }

    public function strip_all_tags($string, $remove_breaks = false)
    {
        $this->__load();
        return parent::strip_all_tags($string, $remove_breaks);
    }

    public function getAllMetadata()
    {
        $this->__load();
        return parent::getAllMetadata();
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function getThread()
    {
        $this->__load();
        return parent::getThread();
    }

    public function getCreatedAt()
    {
        $this->__load();
        return parent::getCreatedAt();
    }

    public function getBody()
    {
        $this->__load();
        return parent::getBody();
    }

    public function setBody($body)
    {
        $this->__load();
        return parent::setBody($body);
    }

    public function getSender()
    {
        $this->__load();
        return parent::getSender();
    }

    public function getTimestamp()
    {
        $this->__load();
        return parent::getTimestamp();
    }

    public function getMetadataForParticipant(\FOS\MessageBundle\Model\ParticipantInterface $participant)
    {
        $this->__load();
        return parent::getMetadataForParticipant($participant);
    }

    public function isReadByParticipant(\FOS\MessageBundle\Model\ParticipantInterface $participant)
    {
        $this->__load();
        return parent::isReadByParticipant($participant);
    }

    public function setIsReadByParticipant(\FOS\MessageBundle\Model\ParticipantInterface $participant, $isRead)
    {
        $this->__load();
        return parent::setIsReadByParticipant($participant, $isRead);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'body', 'createdAt', 'id', 'thread', 'sender', 'metadata');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}