<?php

namespace Proxies\__CG__\Ben\MessageBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Thread extends \Ben\MessageBundle\Entity\Thread implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setCreatedBy(\FOS\MessageBundle\Model\ParticipantInterface $participant)
    {
        $this->__load();
        return parent::setCreatedBy($participant);
    }

    public function addMessage(\FOS\MessageBundle\Model\MessageInterface $message)
    {
        $this->__load();
        return parent::addMessage($message);
    }

    public function addMetadata(\FOS\MessageBundle\Model\ThreadMetadata $meta)
    {
        $this->__load();
        return parent::addMetadata($meta);
    }

    public function getMetadata()
    {
        $this->__load();
        return parent::getMetadata();
    }

    public function getParticipant($current_user)
    {
        $this->__load();
        return parent::getParticipant($current_user);
    }

    public function getParticipantsList()
    {
        $this->__load();
        return parent::getParticipantsList();
    }

    public function getParticipants()
    {
        $this->__load();
        return parent::getParticipants();
    }

    public function addParticipant(\FOS\MessageBundle\Model\ParticipantInterface $participant)
    {
        $this->__load();
        return parent::addParticipant($participant);
    }

    public function addParticipants($participants)
    {
        $this->__load();
        return parent::addParticipants($participants);
    }

    public function isParticipant(\FOS\MessageBundle\Model\ParticipantInterface $participant)
    {
        $this->__load();
        return parent::isParticipant($participant);
    }

    public function getAllMetadata()
    {
        $this->__load();
        return parent::getAllMetadata();
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function getCreatedAt()
    {
        $this->__load();
        return parent::getCreatedAt();
    }

    public function setCreatedAt(\DateTime $createdAt)
    {
        $this->__load();
        return parent::setCreatedAt($createdAt);
    }

    public function getCreatedBy()
    {
        $this->__load();
        return parent::getCreatedBy();
    }

    public function getSubject()
    {
        $this->__load();
        return parent::getSubject();
    }

    public function setSubject($subject)
    {
        $this->__load();
        return parent::setSubject($subject);
    }

    public function getIsSpam()
    {
        $this->__load();
        return parent::getIsSpam();
    }

    public function setIsSpam($isSpam)
    {
        $this->__load();
        return parent::setIsSpam($isSpam);
    }

    public function getMessages()
    {
        $this->__load();
        return parent::getMessages();
    }

    public function getFirstMessage()
    {
        $this->__load();
        return parent::getFirstMessage();
    }

    public function getLastMessage()
    {
        $this->__load();
        return parent::getLastMessage();
    }

    public function isDeletedByParticipant(\FOS\MessageBundle\Model\ParticipantInterface $participant)
    {
        $this->__load();
        return parent::isDeletedByParticipant($participant);
    }

    public function setIsDeletedByParticipant(\FOS\MessageBundle\Model\ParticipantInterface $participant, $isDeleted)
    {
        $this->__load();
        return parent::setIsDeletedByParticipant($participant, $isDeleted);
    }

    public function setIsDeleted($isDeleted)
    {
        $this->__load();
        return parent::setIsDeleted($isDeleted);
    }

    public function isReadByParticipant(\FOS\MessageBundle\Model\ParticipantInterface $participant)
    {
        $this->__load();
        return parent::isReadByParticipant($participant);
    }

    public function setIsReadByParticipant(\FOS\MessageBundle\Model\ParticipantInterface $participant, $isRead)
    {
        $this->__load();
        return parent::setIsReadByParticipant($participant, $isRead);
    }

    public function getMetadataForParticipant(\FOS\MessageBundle\Model\ParticipantInterface $participant)
    {
        $this->__load();
        return parent::getMetadataForParticipant($participant);
    }

    public function getOtherParticipants(\FOS\MessageBundle\Model\ParticipantInterface $participant)
    {
        $this->__load();
        return parent::getOtherParticipants($participant);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'subject', 'createdAt', 'isSpam', 'id', 'createdBy', 'messages', 'metadata');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}